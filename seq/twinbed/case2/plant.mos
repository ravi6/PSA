/*  A simple script Template to run my Plant Model
          Author: Ravi Saripalli
	  Date:   23th Jul. 2015
       
    Highly Simplified ... and easy to read 
*/  

/***************     Load Library and Models   *********/
echo(false);
N := 12; tEnd := 40; iniStepSize:=0.01;
ans := system("zenity --question --text Simulate? >& /dev/null");
sim := if ans == 0 then true else false;
//print(getSettings()); 
print("\n\n****** Loading of packages etc. *****\n\n");
ThermoLib := "/home/ravi/hobby/chem/om/ThermoS/package.mo";
for f in {ThermoLib, "plant.mo", "bed.mo"} loop
	if(loadFile(f)) then
	   print ( f + " Loaded\n");
	else
	   print(f + " Load Failed\n" + getErrorString());
	   exit(1);
	end if;
end for ;
print("\n\n****** Loading Done *****\n\n");

if (sim) then

print("Saving Total Model in total.mo \n") ;
saveTotalModel("total.mo",plant); // gives stand alone mo file to send out for debug reports.
// setCommandLineOptions("+d=initialization"); // pickup initialization errrors

/************ Cleanup Work **********/
print("Cleaning Up Work Area\n") ; system("rm work/*"); cd("./work");   system("pwd");

//flags :=  "-lv=LOG_LS,LOG_INIT,LOG_NLS  -w " ;  
flags:="-w" ;

print("Starting the Plant \n");
buildModel(plant , outputFormat="mat", 
         stopTime=tEnd,  //  numberOfIntervals=1000,// tolerance=1e-3, iniStepSize=iniStepSize, 
         simflags=flags) ;
getErrorString();

print("Finished Building Plant\n"); exit(1);
echo(true);

else
   print("Skipping Simulation\n");
   cd("./work");
//   system("./plant");
end if ;  // Skip simulation
print("Plotting\n");

// Sample at desired times and save data in files for octave
echo(true); // you need both echo and getErrorString() weird ...
outFile := "junk.mo"; 

ts := {0.0, 0.2, 0.4, 0.6, 0.8, 1} * tEnd;
for i in 1:7 loop
    ans := writeFile(outFile, "package pSave extends ThermoS.Util.DataSave(outFile=\"data" +
                      String(i) + "\", resFile=\"plant_res.mat\", sTime=" + String(ts[i]) + "); \n" +
                     "end pSave;", false);
    getErrorString(); loadFile("junk.mo"); getErrorString();
    pSave.saveVars({"time"});
    for prefix in {"bedA.adsbr.", "bedB.adsbr."} loop
        pSave.saveVars({prefix+"p_in"});
        pSave.saveArray(prefix+"zs", N, 0); pSave.saveArray(prefix+"u", N, 0);
        pSave.saveArray(prefix+"p", N, 0);
        pSave.saveArray(prefix+"y", N, 1); pSave.saveArray(prefix+"Q", N, 2);
        pSave.saveArray(prefix+"S", N, 2);
        pSave.saveArray(prefix+"Coef_y", N, 1) ;
        pSave.saveArray(prefix+"Coef_p",N, 0) ;
        pSave.saveArray(prefix+"Coef_u",N, 0) ;
        pSave.saveArray(prefix+"Coef_Q",N, 2) ;
        pSave.saveArray(prefix+"Qeq",N, 2) ;
        pSave.saveVars({prefix+"inlet.m_flow", prefix+"outlet.m_flow"});
    end for;

end for ;
// readSimulationResultVars("plant_res.mat");
//   Plotting etc.
plot({bedA.adsbr.inlet.m_flow, bedA.adsbr.outlet.m_flow},
       curveWidth=2, externalWindow=true, title = "bedA.adsbr - Flow Rate kg/s");
system("sleep 1");
plot({bedA.adsbr.outlet.Xi_outflow[1], bedA.adsbr.inlet.Xi_outflow[1],src.port.Xi_outflow[1]},
       curveWidth=2, externalWindow=true, title = "bedA.adsbr - N2 Mass Fraction");
system("sleep 1");
plot({bedA.adsbr.p_in, bedA.adsbr.p_out},
       curveWidth=2, externalWindow=true, title = "bedA.adsbr - Pressures");
system("sleep 1");

plot({bedB.adsbr.inlet.m_flow, bedB.adsbr.outlet.m_flow},
       curveWidth=2, externalWindow=true, title = "bedB - Flow Rate kg/s");
system("sleep 1");
plot({bedB.adsbr.outlet.Xi_outflow[1], bedB.adsbr.inlet.Xi_outflow[1], src.port.Xi_outflow[1]},
       curveWidth=2, externalWindow=true, title = "bedB - N2 Mass Fraction");
system("sleep 1");
plot({bedB.adsbr.p_in, bedB.adsbr.p_out},
       curveWidth=2, externalWindow=true, title = "bedB - Pressures");
system("sleep 1");
print(getErrorString());

