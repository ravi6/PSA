/*  A simple script Template to run my Plant Model
          Author: Ravi Saripalli
	  Date:   5th Feb. 2015
       
      No need to stick user library in OpenModelica Library
     
*/  

/***************     Load Library and Models   *********/
echo(false) ;
print(getSettings());


ThermoLib := "/home/ravi/hobby/chem/om/ThermoS/package.mo";
print("\n\n****** Loading of packages etc. *****\n\n");
for f in {ThermoLib, "plant.mo", "../Chebychev.mo"} loop
if(loadFile(f)) then
   print ( f + " Loaded\n");
else
   print(f + " Load Failed\n" + getErrorString());
   exit(1);
end if;
end for ;
print("\n\n****** Loading Done *****\n\n");

echo(true); ans:=instantiateModel(plant); echo(false); // print flattened model

print(checkModel(plant));  // This should pickup flattening errors
// saveTotalModel("total.mo",plant); gives stand alone mo file to send out for debug reports.
//                                   can be compiled to see the flattening process as well???
// ThermoS.Util.getInfo();  // useful if you want to go deeper
//setCommandLineOptions("+d=initialization"); // pickup initialization errrors
//setCommandLineOptions("+d=addDerAliases");  // Don't know this
//setCommandLineOptions("+d=noTearing");
/************ Cleanup Work **********/
print("Cleaning Up Work Area\n") ;
system("rm work/*"); cd("./work");   system("pwd");

// *****  Simulation / translation ******
tEnd := 0;// iniStepSize := 1  ;
//count := integer(floor(tEnd / iniStepSize)) ;

setDebugFlags("infoXmlOperations");
flags := "" ; //  "-lv=LOG_NLS -w" ;  
//flags := flags + " -overrideFile ../init ";

/**    Dot Touch this section  else you lose diagnostics**/
print("Starting the Plant \n");
echo(true); // you need both echo and getErrorString() weird ...
simulate(plant, startTime=0, outputFormat="mat", 
         stopTime=tEnd,  // tolerance=1e-6, 
         simflags=flags) ;
         //cflags="-ffloat-store", simflags=flags) ;
getErrorString();

echo(false);
/**    Dot Touch this section  **/
// *** Check Simulation run/translation failures  ***
sVars :=  readSimulationResultVars("plant_res.mat") ; //print(sVars);
if (size(sVars,1) == 0) then  // no variables then bailout
  print("simulation failed ... bailing out\n");
  exit(1);
else
   print("simulation done\n");
   print("No. of Plant Variables = " + String(size(sVars,1)) + "\n");
end if;


print("Plotting\n");

echo(true);
ans:=loadString("
 package pSave extends
    ThermoS.Util.DataSave(outFile=\"data\", resFile=\"plant_res.mat\", sTime=0) ;
 end pSave;
");
getErrorString();

M:=50 ; N:=10;
pSave.saveArray("xs", M, 0);
pSave.saveArray("u", M, 0);
pSave.saveArray("v", M, 0);
pSave.saveArray("Coef", N, 0);
//pSave.saveVars({"});
getErrorString();

/*
ThermoS.Util.printVars("plant_res.mat",{"x[1]", "x[2]", "x[3]", "x[4]", "x[5]"},tEnd);
ThermoS.Util.printVars("plant_res.mat",{"u[1]", "u[2]", "u[3]", "u[4]", "u[5]"},tEnd);
ThermoS.Util.printVars("plant_res.mat",{"v[1]", "v[2]", "v[3]", "v[4]", "v[5]"},tEnd);
ThermoS.Util.printVars("plant_res.mat",{"Coef[1]", "Coef[2]", "Coef[3]", "Coef[4]", "Coef[5]"},tEnd);
*/

//   Plotting etc.
//plot({valve[1].inlet.m_flow, valve[2].inlet.m_flow},
//       curveWidth=2, externalWindow=true, title = "Flow Rate kg/s");

getErrorString();
